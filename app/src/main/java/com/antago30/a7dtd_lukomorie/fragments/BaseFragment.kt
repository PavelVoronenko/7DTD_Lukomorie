package com.antago30.a7dtd_lukomorie.fragments

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import com.antago30.a7dtd_lukomorie.R
import com.antago30.a7dtd_lukomorie.parser.WebParser
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import com.antago30.a7dtd_lukomorie.utils.Constants

abstract class BaseFragment : Fragment() {

    protected lateinit var webParser: WebParser

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        webParser = WebParser()
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_base, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        startRefresh()
    }

    override fun onPause() {
        super.onPause()
        stopRefresh()
    }

    abstract fun loadData(): Any // üëà –í–°–ï –§–†–ê–ì–ú–ï–ù–¢–´ –í–û–ó–í–†–ê–©–ê–Æ–¢ –°–í–û–ò –î–ê–ù–ù–´–ï

    private var refreshJob: Job? = null

    private fun startRefresh() {
        refreshJob = viewLifecycleOwner.lifecycleScope.launch {
            while (true) {
                val data = withContext(Dispatchers.IO) {
                    // üëá –í—ã–∑—ã–≤–∞–µ–º loadData() ‚Äî –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
                    loadData()
                }

                // üëá –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ Main-–ø–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                withContext(Dispatchers.Main) {
                    updateUI(data) // üëà –¢–µ–ø–µ—Ä—å –º—ã –ø–µ—Ä–µ–¥–∞—ë–º ANY ‚Äî —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å–∞–º —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è
                }

                delay(10000)
            }
        }
    }

    private fun stopRefresh() {
        refreshJob?.cancel()
    }

    // üëá –ê–ë–°–¢–†–ê–ö–¢–ù–´–ô –ú–ï–¢–û–î ‚Äî –ö–ê–ñ–î–´–ô –§–†–ê–ì–ú–ï–ù–¢ –°–ê–ú –û–ü–†–ï–î–ï–õ–Ø–ï–¢, –ö–ê–ö –û–ë–ù–û–í–õ–Ø–¢–¨ UI
    protected abstract fun updateUI(data: Any)
}